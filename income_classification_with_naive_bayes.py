# -*- coding: utf-8 -*-
"""CI_finalProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18HtgRo9319HQbVts9MJV4eW8Vx44UXe_
"""

#@title #Required Libraries 
from pathlib import Path
import pandas as pd
import numpy as np
import nltk
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
import string
from nltk import pos_tag
from nltk.stem import PorterStemmer
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix,accuracy_score
from sklearn.naive_bayes import GaussianNB
import seaborn as sns
import ipywidgets as widgets

nltk.download('punkt')
nltk.download('stopwords')
nltk.download('averaged_perceptron_tagger')
nltk.download('wordnet')

#@title #Read dataSet from google drive

dsPath = "/content/drive/MyDrive/CI_finalProject/dataset.csv" #@param {type:"string"}
#@markdown ### Enter a file path evaluation:
dspath_evaluation = "/content/drive/MyDrive/CI_finalProject/" #@param {type:"string"}
df = pd.read_csv(dsPath)
#ds = pd.read_csv(dspath_evaluation)

#@markdown #$ Dataset Size$
DSLen = len(df)

button = widgets.Button(
    description='DatasetSize',
    disabled=False,
    button_style='warning', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Click to see Dataset size',
)
output = widgets.Output()
def on_button_clicked(b):
  # Display the message within the output widget.
  with output:
    print('Dataset size is: ', DSLen)

button.on_click(on_button_clicked)
display(button, output)

#@title #Show nth First of Dataset
N_row_of_ds = 176 #@param {type:"slider", min:0, max:1000, step:1}

ds_head = df.head(N_row_of_ds)
button = widgets.Button(
    description='Click me',
    disabled=False,
    button_style='info', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='N First of Dataset',
)
output = widgets.Output()
def on_button_clicked(b):
  # Display the message within the output widget.
  with output:
    print(N_row_of_ds, ' First of Dataset: ', ds_head)

button.on_click(on_button_clicked)
display(button, output)

#@title #DataSet is imbalance

#df['target'].value_counts()
button = widgets.Button(
    description='Click me',
    disabled=False,
    button_style='warning', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Click to see Dataset size',
)
output = widgets.Output()
def on_button_clicked(b):
  # Display the message within the output widget.
  with output:
    sns.countplot(x='target', data=df)

button.on_click(on_button_clicked)
display(button, output)

#@title #There are No missig value
df.isnull().sum()

#@title #describe the dataset
df.describe()

#@title #Dimension Reduction (Subset selection)
#@markdown Backward search
x = df.iloc[:,[0,1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]]
y = df.iloc[:,-1:]

#drop features from dataset
#x = df.drop(['sex', 'target'],axis = 1)

#@title #Train test Split
#@markdown Breaking down dataSet into Train & Test set
#@markdown ####Please select test size from below slider: (0.26 is for best result)
test_size_from_slider = 0.26 #@param {type:"slider", min:0, max:1, step:0.01}

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = test_size_from_slider, random_state = 9)
#X_train.shape

"""# **`preprocessing step`**"""

#@title #Data Normalization
#@markdown Organizing data in a database
from sklearn.preprocessing import MinMaxScaler
# fit scaler on training data
norm = MinMaxScaler().fit(X_train)
# transform training data
X_train_norm = norm.transform(X_train)
# transform testing dataabs
X_test_norm = norm.transform(X_test)
X_train_norm

#@title #Under Sampling
#@markdown Random Under Sampling with RandomUnderSampler

from imblearn.under_sampling import RandomUnderSampler


rus = RandomUnderSampler(random_state = 9)
X_sample2, Y_sample2 = rus.fit_resample(X_train, y_train)
X_sample2.shape

#@title #standard normal distribution
#@markdown It arranges the data in a standard normal distribution ( In short, it standardizes the data)

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

#@title #Training the training set on the Naive Bayes model

classifier = GaussianNB()
classifier.fit(X_train, y_train)
#accuracy_score(X_train,y_train)

#@title #Giving test set to my classifier

y_pred  =  classifier.predict(X_test)
# y_pred
#y_test
#y_pred_DataFrame = pd.DataFrame(y_pred)
#y_pred_DataFrame

#@title #Evaluate my classifier
#@markdown Accuracy (all correct / all) = TP + TN / TP + TN + FP + FN.

cm = confusion_matrix(y_test, y_pred)
ac = accuracy_score(y_test,y_pred)

#confusion Matrix
button = widgets.Button(
    description='confusion Matrix',
    disabled=False,
    button_style='success', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='N First of Dataset',
)
output = widgets.Output()
def on_button_clicked(b):
  # Display the message within the output widget.
  with output:
    print('confusion Matrix is: ')
    print(cm)

button.on_click(on_button_clicked)
display(button, output)

#Accuracy
button = widgets.Button(
    description='Accuracy',
    disabled=False,
    button_style='success', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='N First of Dataset',
)
output = widgets.Output()
def on_button_clicked(b):
  # Display the message within the output widget.
  with output:
    print('accuracy Score is: ')
    print(ac)

button.on_click(on_button_clicked)
display(button, output)

#@title #Interpretations of the output
#@markdown Of the all data from Test Set we have:

Tn, Fp, Fn, Tp = confusion_matrix(y_test, y_pred).ravel()
cms = Fp #@param ["Tn", "Fp", "Fn", "Tp"] {type:"raw"}
#@markdown ##--Click Button to see Output 
#@markdown #####True Positive (TP) is an outcome where the model correctly predicts the positive class.
#@markdown #####True Negative (TN) is an outcome where the model correctly predicts the negative class.
#@markdown #####False Positive (FP) is an outcome where the model incorrectly predicts the positive class.
#@markdown #####False Negative (FN) is an outcome where the model incorrectly predicts the negative class.

if cms == Tn:
  button = widgets.Button(
    description='True Negative',
    disabled=False,
    button_style='success', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='True Negative (TN)',
  )
  output = widgets.Output()
  def on_button_clicked(b):
  # Display the message within the output widget.
    with output:
      print('True Negative (TN) is: ')
      print(Tn)

  button.on_click(on_button_clicked)
  display(button, output)
elif cms == Fp:
  button = widgets.Button(
    description='False Positive',
    disabled=False,
    button_style='danger', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='False Positive (FP)',
  )
  output = widgets.Output()
  def on_button_clicked(b):
  # Display the message within the output widget.
    with output:
      print('False Positive (FP) is: ')
      print(Fp)

  button.on_click(on_button_clicked)
  display(button, output)
elif cms == Fn:
  button = widgets.Button(
    description='False Negative',
    disabled=False,
    button_style='danger', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='False Negative (FN)',
  )
  output = widgets.Output()
  def on_button_clicked(b):
  # Display the message within the output widget.
    with output:
      print('False Negative (FN) is: ')
      print(Fn)

  button.on_click(on_button_clicked)
  display(button, output)
elif cms == Tp:
  button = widgets.Button(
    description='True Positive',
    disabled=False,
    button_style='success', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='True Positive (TP) ',
  )
  output = widgets.Output()
  def on_button_clicked(b):
  # Display the message within the output widget.
    with output:
      print('True Positive (TP)  is: ')
      print(Tp)

  button.on_click(on_button_clicked)
  display(button, output)